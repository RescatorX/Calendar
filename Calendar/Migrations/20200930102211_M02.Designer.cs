// <auto-generated />
using System;
using Calendar.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Calendar.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200930102211_M02")]
    partial class M02
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Calendar.Data.Entities.AuditTrail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Operation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AuditTrail");
                });

            modelBuilder.Entity("Calendar.Data.Entities.CalendarEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllDay")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EventTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("SendEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("SendSms")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EventTypeId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OwnerId");

                    b.ToTable("CalendarEvent");
                });

            modelBuilder.Entity("Calendar.Data.Entities.CalendarEventType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CalendarEventType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e4a9ed74-0a95-4dee-99e8-02c0386bed5d"),
                            Color = "lightgreen",
                            Name = "F"
                        },
                        new
                        {
                            Id = new Guid("9c37d3ac-3b57-40c6-9710-6edfc2ba197c"),
                            Color = "lightblue",
                            Name = "PS"
                        },
                        new
                        {
                            Id = new Guid("134e7506-e905-4527-9280-6239f5540280"),
                            Color = "yellow",
                            Name = "SF"
                        },
                        new
                        {
                            Id = new Guid("873e54c1-e758-406a-8786-a9cd482bfd7d"),
                            Color = "pink",
                            Name = "BF"
                        },
                        new
                        {
                            Id = new Guid("0253df6e-77fc-4cd0-a77f-3019bb4ca5c5"),
                            Color = "orange",
                            Name = "BSF"
                        },
                        new
                        {
                            Id = new Guid("9de04db1-7ed8-473d-a531-2f0a4044089c"),
                            Color = "brown",
                            Name = "MF"
                        },
                        new
                        {
                            Id = new Guid("0cee543d-aef7-4b25-975f-07179df27537"),
                            Color = "blue",
                            Name = "MSF"
                        },
                        new
                        {
                            Id = new Guid("679d74cd-f790-4927-b6e3-b383b6ac5cea"),
                            Color = "green",
                            Name = "TONER"
                        },
                        new
                        {
                            Id = new Guid("034a2d2a-d5d6-48a5-a76a-5eef35da93ef"),
                            Color = "magenta",
                            Name = "AGÁVE"
                        },
                        new
                        {
                            Id = new Guid("f5f500b0-3c71-490f-bac0-a757c58de99e"),
                            Color = "red",
                            Name = "KONZULTACE"
                        },
                        new
                        {
                            Id = new Guid("5a52d99b-ac05-409e-abd2-668a80e6be50"),
                            Color = "cyan",
                            Name = "VÝČES"
                        },
                        new
                        {
                            Id = new Guid("e7d69b69-13ad-44f5-b291-f6c4f4b186bc"),
                            Color = "lightbrown",
                            Name = "JINÉ"
                        });
                });

            modelBuilder.Entity("Calendar.Data.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SendEmails")
                        .HasColumnType("bit");

                    b.Property<bool>("SendSmss")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Calendar.Models.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("36c1d130-1233-42e4-a732-c33cc648331a"),
                            ConcurrencyStamp = "4aa87eaf-7cd5-4b34-8b64-0f46c57b3cc0",
                            Description = "Administrators role",
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("9ceb321f-0a0b-4a45-9f45-2c2a17da761a"),
                            ConcurrencyStamp = "9dbc935b-fdb4-4da7-b4c6-6a75452c074e",
                            Description = "Stylists role",
                            Name = "Stylist",
                            NormalizedName = "STYLIST",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Calendar.Models.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Calendar.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefaultColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("93b8792c-2cd6-4a75-9f96-1fa8aab99660"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "62c67ae3-55b5-411c-8502-ce6b8269c6f9",
                            Created = new DateTime(2020, 9, 30, 12, 22, 11, 55, DateTimeKind.Local).AddTicks(8689),
                            DefaultColor = "lightgreen",
                            Email = "xkalinam@email.cz",
                            EmailConfirmed = true,
                            FirstName = "Miroslav",
                            LastName = "Kalina",
                            LockoutEnabled = false,
                            NormalizedEmail = "XKALINAM@EMAIL.CZ",
                            NormalizedUserName = "RESCATORX",
                            PasswordHash = "d82494f05d6917ba02f7aaa29689ccb444bb73f20380876cb05d1f37537b7892",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = true,
                            Status = 2,
                            TwoFactorEnabled = false,
                            UserName = "RescatorX"
                        },
                        new
                        {
                            Id = new Guid("57e9c5c9-0995-45ab-b5c3-bf4373533462"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "687c82a8-abf7-4628-b02e-bbc099e66ca6",
                            Created = new DateTime(2020, 9, 30, 12, 22, 11, 58, DateTimeKind.Local).AddTicks(488),
                            DefaultColor = "lightblue",
                            Email = "jiri.pragr@seznam.cz",
                            EmailConfirmed = true,
                            FirstName = "Jiří",
                            LastName = "Prágr",
                            LockoutEnabled = false,
                            NormalizedEmail = "JIRI.PRAGR@SEZNAM.CZ",
                            NormalizedUserName = "JPRAGR",
                            PasswordHash = "d82494f05d6917ba02f7aaa29689ccb444bb73f20380876cb05d1f37537b7892",
                            PhoneNumber = "987654321",
                            PhoneNumberConfirmed = true,
                            Status = 2,
                            TwoFactorEnabled = false,
                            UserName = "jpragr"
                        },
                        new
                        {
                            Id = new Guid("c9ed137c-6333-4246-8c24-680a5e61eaa2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "de2d987c-d190-48c2-9977-5237b0df2040",
                            Created = new DateTime(2020, 9, 30, 12, 22, 11, 58, DateTimeKind.Local).AddTicks(652),
                            DefaultColor = "pink",
                            Email = "sandra.nisterova@seznam.cz",
                            EmailConfirmed = true,
                            FirstName = "Sandra",
                            LastName = "Nisterová",
                            LockoutEnabled = false,
                            NormalizedEmail = "SANDRA.NISTEROVA@SEZNAM.CZ",
                            NormalizedUserName = "SNISTEROVA",
                            PasswordHash = "d82494f05d6917ba02f7aaa29689ccb444bb73f20380876cb05d1f37537b7892",
                            PhoneNumber = "666555444",
                            PhoneNumberConfirmed = true,
                            Status = 2,
                            TwoFactorEnabled = false,
                            UserName = "snisterova"
                        },
                        new
                        {
                            Id = new Guid("2647f5d5-f29a-4b26-9066-a8a6625f867e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b34b2704-1110-40dc-b59f-67933236c547",
                            Created = new DateTime(2020, 9, 30, 12, 22, 11, 58, DateTimeKind.Local).AddTicks(751),
                            DefaultColor = "yellow",
                            Email = "iveta.iveta@seznam.cz",
                            EmailConfirmed = true,
                            FirstName = "Iveta",
                            LastName = "Iveta",
                            LockoutEnabled = false,
                            NormalizedEmail = "IVETA.IVETA@SEZNAM.CZ",
                            NormalizedUserName = "IIVETA",
                            PasswordHash = "d82494f05d6917ba02f7aaa29689ccb444bb73f20380876cb05d1f37537b7892",
                            PhoneNumber = "777888999",
                            PhoneNumberConfirmed = true,
                            Status = 2,
                            TwoFactorEnabled = false,
                            UserName = "iiveta"
                        },
                        new
                        {
                            Id = new Guid("eb5875cd-35df-4638-a7c3-6d8bc0ff0188"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0e62101d-ac4e-457a-978f-8bd0b5221e8d",
                            Created = new DateTime(2020, 9, 30, 12, 22, 11, 58, DateTimeKind.Local).AddTicks(816),
                            DefaultColor = "green",
                            Email = "michal.michal@seznam.cz",
                            EmailConfirmed = true,
                            FirstName = "Michal",
                            LastName = "Michal",
                            LockoutEnabled = false,
                            NormalizedEmail = "MICHAL.MICHAL@SEZNAM.CZ",
                            NormalizedUserName = "MMICHAL",
                            PasswordHash = "d82494f05d6917ba02f7aaa29689ccb444bb73f20380876cb05d1f37537b7892",
                            PhoneNumber = "111222333",
                            PhoneNumberConfirmed = true,
                            Status = 2,
                            TwoFactorEnabled = false,
                            UserName = "mmichal"
                        });
                });

            modelBuilder.Entity("Calendar.Models.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Calendar.Models.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Calendar.Models.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Added")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("93b8792c-2cd6-4a75-9f96-1fa8aab99660"),
                            RoleId = new Guid("36c1d130-1233-42e4-a732-c33cc648331a"),
                            Added = new DateTime(2020, 9, 30, 12, 22, 11, 58, DateTimeKind.Local).AddTicks(3188)
                        },
                        new
                        {
                            UserId = new Guid("57e9c5c9-0995-45ab-b5c3-bf4373533462"),
                            RoleId = new Guid("36c1d130-1233-42e4-a732-c33cc648331a"),
                            Added = new DateTime(2020, 9, 30, 12, 22, 11, 58, DateTimeKind.Local).AddTicks(3840)
                        },
                        new
                        {
                            UserId = new Guid("57e9c5c9-0995-45ab-b5c3-bf4373533462"),
                            RoleId = new Guid("9ceb321f-0a0b-4a45-9f45-2c2a17da761a"),
                            Added = new DateTime(2020, 9, 30, 12, 22, 11, 58, DateTimeKind.Local).AddTicks(3892)
                        },
                        new
                        {
                            UserId = new Guid("c9ed137c-6333-4246-8c24-680a5e61eaa2"),
                            RoleId = new Guid("9ceb321f-0a0b-4a45-9f45-2c2a17da761a"),
                            Added = new DateTime(2020, 9, 30, 12, 22, 11, 58, DateTimeKind.Local).AddTicks(3915)
                        });
                });

            modelBuilder.Entity("Calendar.Models.ApplicationUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("93b8792c-2cd6-4a75-9f96-1fa8aab99660"),
                            LoginProvider = "CalendarLoginProvider",
                            Name = "Token1",
                            Value = "Token1"
                        },
                        new
                        {
                            UserId = new Guid("57e9c5c9-0995-45ab-b5c3-bf4373533462"),
                            LoginProvider = "CalendarLoginProvider",
                            Name = "Token2",
                            Value = "Token2"
                        });
                });

            modelBuilder.Entity("Calendar.Data.Entities.AuditTrail", b =>
                {
                    b.HasOne("Calendar.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Calendar.Data.Entities.CalendarEvent", b =>
                {
                    b.HasOne("Calendar.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Calendar.Data.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("Calendar.Data.Entities.CalendarEventType", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeId");

                    b.HasOne("Calendar.Models.ApplicationUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("Calendar.Models.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("Calendar.Models.ApplicationRoleClaim", b =>
                {
                    b.HasOne("Calendar.Models.ApplicationRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Calendar.Models.ApplicationUserClaim", b =>
                {
                    b.HasOne("Calendar.Models.ApplicationUser", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Calendar.Models.ApplicationUserLogin", b =>
                {
                    b.HasOne("Calendar.Models.ApplicationUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Calendar.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("Calendar.Models.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Calendar.Models.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Calendar.Models.ApplicationUserToken", b =>
                {
                    b.HasOne("Calendar.Models.ApplicationUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
